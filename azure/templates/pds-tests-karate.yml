steps:

  - task: Npm@1
    inputs:
      command: 'custom'
      customCommand: 'install -g @stoplight/prism-cli'

  - task: JavaToolInstaller@0
    displayName: Install JRE & JDK v17 x64
    inputs:
      versionSpec: "17"
      jdkArchitectureOption: "x64"
      jdkSourceOption: "LocalDirectory"
      jdkFile: "/tmp/openjdk.tar.gz"
      jdkDestinationDirectory: "/tmp/openjdk"

  - template: "expose-pds-variables-and-commands.yml"

  # Run the tests against veit07
  - bash: |
      export OAUTH_BASE_URI="https://$(ENVIRONMENT).api.service.nhs.uk"
      export OAUTH_PROXY="oauth2-mock"
      export PDS_BASE_PATH="$(SERVICE_BASE_PATH)"
      export CLIENT_ID="$(CLIENT_ID)"
      export CLIENT_SECRET="$(CLIENT_SECRET)"
      export INTERACTION_FREE_CLIENT_ID="$(INTERACTION_FREE_CLIENT_ID)"
      export INTERACTION_FREE_CLIENT_SECRET="$(INTERACTION_FREE_CLIENT_SECRET)"
      export EMPTY_ADDRESS_LINES_CLIENT_ID="$EMPTY_ADDRESS_LINES_CLIENT_ID"
      export EMPTY_ADDRESS_LINES_CLIENT_SECRET="$EMPTY_ADDRESS_LINES_CLIENT_SECRET"
      export CONFIDENTIAL_REMOVAL_REASONS_CLIENT_ID="$CONFIDENTIAL_REMOVAL_REASONS_CLIENT_ID"
      export CONFIDENTIAL_REMOVAL_REASONS_CLIENT_SECRET="$CONFIDENTIAL_REMOVAL_REASONS_CLIENT_SECRET"
      export RECORD_SHARING_CONSENT_APP_CLIENT_ID="$RECORD_SHARING_CONSENT_APP_CLIENT_ID"
      export RECORD_SHARING_CONSENT_APP_CLIENT_SECRET="$RECORD_SHARING_CONSENT_APP_CLIENT_SECRET"
      export APPLICATION_RESTRICTED_API_KEY="$(JWT_TESTING_API_KEY)"
      export PRIVILEGED_ACCESS_API_KEY="$(PRIVILEGED_ACCESS_API_KEY)"
      export APPLICATION_RESTRICTED_SIGNING_KEY_PATH="$(Pipeline.Workspace)/secrets/$(JWT_TESTING_PRIVATE_KEY)"
      export PRIVILEGED_ACCESS_SIGNING_KEY_PATH="$(Pipeline.Workspace)/secrets/$(PRIVILEGED_ACCESS_TESTING_SIGNING_KEY)"
      export INTERNAL_SERVER_BASE_URI="$(INTERNAL_SERVER_BASE_URI)"
      export KEY_ID="$(KEY_ID)"

      export JAVA_HOME=/tmp/openjdk
      export PATH=$JAVA_HOME/bin:$PATH

      java -version

      mvn clean test -Dtest=TestParallel 
    displayName: 'Run Karate Tests'
    workingDirectory: "$(ARTIFACT_PATH)/karate-tests"
    
  - task: PublishTestResults@2
    displayName: 'Publish Karate test results'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      testResultsFiles: $(ARTIFACT_PATH)/karate-tests/target/karate-reports/*.xml
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Karate HTML test report as an artifact'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      pathToPublish: $(ARTIFACT_PATH)/karate-tests/target/karate-reports
      artifactName: KarateHTMLReports

  # Run the tests against veit07, via the Prism proxy
  - bash: |
      export OAUTH_BASE_URI="https://$(ENVIRONMENT).api.service.nhs.uk"
      export PDS_BASE_PATH="$(SERVICE_BASE_PATH)"
      if [ -z "$(SERVICE_ARTIFACT_NAME)" ]; then
        make publish
        export SPEC_PATH="build/personal-demographics.json"
      else
        export SPEC_PATH="personal-demographics.json"
      fi
      prism proxy $SPEC_PATH $OAUTH_BASE_URI/$PDS_BASE_PATH --errors --validate-request false &
    displayName: 'Start Prism Proxy Server'
    workingDirectory: "$(ARTIFACT_PATH)"

  - bash: |
      export OAUTH_BASE_URI="https://$(ENVIRONMENT).api.service.nhs.uk"
      export OAUTH_PROXY="oauth2-mock"
      export PDS_BASE_PATH="$(SERVICE_BASE_PATH)"
      export CLIENT_ID="$(CLIENT_ID)"
      export CLIENT_SECRET="$(CLIENT_SECRET)"
      export APPLICATION_RESTRICTED_API_KEY="$(JWT_TESTING_API_KEY)"
      export PRIVILEGED_ACCESS_API_KEY="$(PRIVILEGED_ACCESS_API_KEY)"
      export APPLICATION_RESTRICTED_SIGNING_KEY_PATH="$(Pipeline.Workspace)/secrets/$(JWT_TESTING_PRIVATE_KEY)"
      export PRIVILEGED_ACCESS_SIGNING_KEY_PATH="$(Pipeline.Workspace)/secrets/$(PRIVILEGED_ACCESS_TESTING_SIGNING_KEY)"
      export INTERNAL_SERVER_BASE_URI="$(INTERNAL_SERVER_BASE_URI)"
      export KEY_ID="$(KEY_ID)"
      mvn clean test -Dtest=TestSchemaParallel 
    displayName: 'Run Schema Tests'
    workingDirectory: "$(ARTIFACT_PATH)/karate-tests"
    
  - task: PublishTestResults@2
    displayName: 'Publish Karate Schema HTML test results'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      testResultsFiles: $(ARTIFACT_PATH)/karate-tests/target/karate-reports/*.xml
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Karate Schema HTML test report as an artifact'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      pathToPublish: $(ARTIFACT_PATH)/karate-tests/target/karate-reports
      artifactName: KarateSchemaTestsHTMLReports
