steps:

  - task: Npm@1
    inputs:
      command: 'custom'
      customCommand: 'install -g @stoplight/prism-cli'

  - template: "azure/components/aws-assume-role.yml@common"
    parameters:
     role: "auto-ops"
     profile: "apm_ptl"

  - template: "azure/components/get-aws-secrets-and-ssm-params.yml@common"
    parameters:
     secret_file_ids:
      - ptl/app-credentials/jwt_testing/non-prod/JWT_TESTING_WITH_ASID_PRIVATE_KEY
      - ptl/app-credentials/jwt_testing/non-prod/JWT_TESTING_PRIVATE_KEY
      - ptl/app-credentials/jwt_testing/non-prod/ID_TOKEN_NHS_LOGIN_PRIVATE_KEY
     config_ids:
      - /ptl/azure-devops/env-internal-dev/test-app/internal-testing-internal-dev/CLIENT_ID
      - /ptl/azure-devops/env-internal-dev/test-app/internal-testing-internal-dev/CLIENT_SECRET
      - /ptl/azure-devops/personal-demographics/INTERNAL_SERVER_BASE_URI
      - /ptl/azure-devops/personal-demographics/AUTH_TOKEN_EXPIRY_MS
      - /ptl/azure-devops/personal-demographics/AUTH_TOKEN_EXPIRY_MS_INT
     secret_ids:
      - ptl/app-credentials/jwt_testing/non-prod/JWT_TESTING_API_KEY
      - ptl/app-credentials/jwt_testing/non-prod/JWT_TESTING_WITH_ASID_API_KEY
      - ptl/backends/ig3/INTERNAL_DEV_ASID
  
  - bash: |
      echo '##vso[task.setvariable variable=APIGEE_ENVIRONMENT]$(ENVIRONMENT)'
      echo '##vso[task.setvariable variable=PDS_BASE_PATH]$(SERVICE_BASE_PATH)'
      echo '##vso[task.setvariable variable=CLIENT_ID]$(CLIENT_ID)'
      echo '##vso[task.setvariable variable=CLIENT_SECRET]$(CLIENT_SECRET)'
      echo '##vso[task.setvariable variable=KEY_ID]test-1'
    displayName: Expose common variables

   # Run the tests against veit07
  - bash: |
      export OAUTH_BASE_URI="https://$(ENVIRONMENT).api.service.nhs.uk"
      export OAUTH_PROXY="oauth2-mock"
      export PDS_BASE_PATH="$(SERVICE_BASE_PATH)"
      export CLIENT_ID="$(CLIENT_ID)"
      export CLIENT_SECRET="$(CLIENT_SECRET)"
      export APPLICATION_RESTRICTED_API_KEY="$(JWT_TESTING_API_KEY)"
      export APPLICATION_RESTRICTED_SIGNING_KEY_PATH="$(ARTIFACT_PATH)/secrets/$(JWT_TESTING_PRIVATE_KEY)"
      export INTERNAL_SERVER_BASE_URI="$(INTERNAL_SERVER_BASE_URI)"
      export KEY_ID="$(KEY_ID)"
      mvn clean test -Dtest=TestParallel 
    displayName: 'Run Karate Tests'
    workingDirectory: "$(ARTIFACT_PATH)/karate-tests"
    
  - task: PublishTestResults@2
    displayName: 'Publish Karate test results'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      testResultsFiles: $(ARTIFACT_PATH)/karate-tests/target/karate-reports/*.xml
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Karate HTML test report as an artifact'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      pathToPublish: $(ARTIFACT_PATH)/karate-tests/target/karate-reports
      artifactName: KarateHTMLReports

  # Run the tests against the Karate mocks
  - bash: |
      export CLIENT_ID="$(CLIENT_ID)"
      mvn clean test -Dtest=TestMockParallel 
    displayName: 'Run Karate Mock Tests'
    workingDirectory: "$(ARTIFACT_PATH)/karate-tests"
    
  - task: PublishTestResults@2
    displayName: 'Publish Karate sandbox test results'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      testResultsFiles: $(ARTIFACT_PATH)/karate-tests/target/karate-reports/*.xml
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Karate Sandbox HTML test report as an artifact'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      pathToPublish: $(ARTIFACT_PATH)/karate-tests/target/karate-reports
      artifactName: KarateSandboxHTMLReports

  # Run the tests against veit07, via the Prism proxy
  - bash: |
      export OAUTH_BASE_URI="https://$(ENVIRONMENT).api.service.nhs.uk"
      export PDS_BASE_PATH="$(SERVICE_BASE_PATH)"
      make publish
      prism proxy build/personal-demographics.json $OAUTH_BASE_URI/$PDS_BASE_PATH --errors --validate-request false &
    displayName: 'Start Prism Proxy Server'
    workingDirectory: "$(ARTIFACT_PATH)"

  - bash: |
      export OAUTH_BASE_URI="https://$(ENVIRONMENT).api.service.nhs.uk"
      export OAUTH_PROXY="oauth2-mock"
      export PDS_BASE_PATH="$(SERVICE_BASE_PATH)"
      export CLIENT_ID="$(CLIENT_ID)"
      export CLIENT_SECRET="$(CLIENT_SECRET)"
      export APPLICATION_RESTRICTED_API_KEY="$(JWT_TESTING_API_KEY)"
      export APPLICATION_RESTRICTED_SIGNING_KEY_PATH="$(ARTIFACT_PATH)/secrets/$(JWT_TESTING_PRIVATE_KEY)"
      export INTERNAL_SERVER_BASE_URI="$(INTERNAL_SERVER_BASE_URI)"
      export KEY_ID="$(KEY_ID)"
      mvn clean test -Dtest=TestSchemaParallel 
    displayName: 'Run Schema Tests'
    workingDirectory: "$(ARTIFACT_PATH)/karate-tests"
    
  - task: PublishTestResults@2
    displayName: 'Publish Karate Schema HTML test results'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      testResultsFiles: $(ARTIFACT_PATH)/karate-tests/target/karate-reports/*.xml
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Karate Schema HTML test report as an artifact'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      pathToPublish: $(ARTIFACT_PATH)/karate-tests/target/karate-reports
      artifactName: KarateSchemaTestsHTMLReports
