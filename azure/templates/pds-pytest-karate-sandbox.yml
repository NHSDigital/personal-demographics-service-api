
steps:
  # all the steps for installing java and building the jarfile...
  - task: Bash@3
    displayName: 'Download jdk 22'
    inputs:
      targetType: 'inline'
      script: |
        wget https://download.java.net/java/GA/jdk22/830ec9fcccef480bb3e73fb7ecafe059/36/GPL/openjdk-22_linux-x64_bin.tar.gz
        cp openjdk-22_linux-x64_bin.tar.gz /tmp/openjdk-22_linux-x64_bin.tar.gz

  - task: JavaToolInstaller@0
    displayName: 'Install jdk 22'
    inputs:
      versionSpec: 22
      jdkArchitectureOption: x64
      jdkSourceOption: LocalDirectory
      jdkFile: /tmp/openjdk-22_linux-x64_bin.tar.gz

  - task: Bash@3
    displayName: 'Build Karate jarfile'
    inputs:
      targetType: 'inline'
      script: |
        git clone https://github.com/karatelabs/karate.git karate
        cd karate
        git checkout c0597e5b7fcd61be47f916854e8473da11b37956
        mvn clean install -P pre-release -pl -karate-robot -DskipTests
        mvn package -B -ntp -P fatjar -DskipTests -f karate-core/pom.xml
        cp karate-core/target/karate-core-1.6.0-SNAPSHOT.jar karate-tests/karate.jar
        echo "now karate-tests folder looks like:"
        ls karate-tests

  - bash: poetry install
    workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
    displayName: Install poetry dependencies

  - bash: |
      ls
      ls karate-tests
      cd karate-tests && bash build-sandbox-ado.sh && docker run --name karate-sandbox nhs/pds-sandbox:latest
      # export APIGEE_ENVIRONMENT="docker"
      # export CONTAINER_IP=$(docker inspect karate-sandbox | grep -oE '[0-9]+(\.[0-9]+){3}' | head -n 1)
      # echo "container ip: " $CONTAINER_IP
      # docker inspect karate-sandbox
      
      # poetry run pytest -v tests/sandbox/test_sandbox.py --junitxml=tests/sandbox-test-report.xml --reruns 3 --reruns-delay 1
    displayName: Run pytest sandbox tests against Karate sandbox
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)"

  - task: PublishTestResults@2
    displayName: 'Publish sandbox test results'
    inputs:
      testResultsFiles: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests/sandbox-test-report.xml
      failTaskOnFailedTests: true