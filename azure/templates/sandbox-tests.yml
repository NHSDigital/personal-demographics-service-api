steps:
  # Run the tests against the Karate mocks
  - bash: |
      export CLIENT_ID="$(CLIENT_ID)"
      mvn clean test -Dtest=TestMockParallel 
    displayName: 'Run Karate Mock Tests'
    workingDirectory: "$(ARTIFACT_PATH)/karate-tests"
    
  - task: PublishTestResults@2
    displayName: 'Publish Karate sandbox test results'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      testResultsFiles: $(ARTIFACT_PATH)/karate-tests/target/karate-reports/*.xml
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Karate Sandbox HTML test report as an artifact'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      pathToPublish: $(ARTIFACT_PATH)/karate-tests/target/karate-reports
      artifactName: KarateSandboxHTMLReports

  - bash: poetry install
    workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
    displayName: Setup sandbox tests

  - bash: |
      export SERVICE_BASE_PATH="$(SERVICE_BASE_PATH)"
      export APIGEE_ENVIRONMENT="$(ENVIRONMENT)"
      export SOURCE_COMMIT_ID=$(Build.SourceVersion)
      export STATUS_ENDPOINT_API_KEY="$(status-endpoint-api-key)"

      poetry run pytest -v tests/sandbox/test_sandbox.py --junitxml=tests/sandbox-test-report.xml --reruns 3 --reruns-delay 1 --maxfail=10
    displayName: Run sandbox tests
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)"

  - task: PublishTestResults@2
    displayName: 'Publish sandbox test results'
    inputs:
      testResultsFiles: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests/sandbox-test-report.xml
      failTaskOnFailedTests: true
