paramters:
  - name: is_prod_sandbox
    displayName: Is the environment sandbox in prod?
    type: boolean
    default: false

steps:
  - bash: poetry install
    workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
    displayName: Setup sandbox tests

  - task: Bash@3
    displayName: Find out what parameters.is_prod_sandbox is?
    inputs:
      targetType: 'inline'
      script: |
        echo ${{parameters.is_prod_sandbox}}

  - ${{ if eq(parameters.is_prod_sandbox, true) }}:
    - template: "azure/components/get-aws-secrets-and-ssm-params.yml@common"
      parameters:
        secret_ids:
          - ptl/azure-devops/personal-demographics/int/APIGEE_APP_ID
      displayName: Set APIGEE_APP_ID for prod sandbox env
  
  - ${{ if eq(parameters.is_prod_sandbox, false) }}:
    - bash: |
        echo "#vso[task.setvariable variable=APIGEE_APP_ID;issecret=true]"
      displayName: Set APIGEE_APP_ID for non-prod sandbox env

  - bash: |
      export SERVICE_BASE_PATH="$(SERVICE_BASE_PATH)"
      export APIGEE_ENVIRONMENT="$(ENVIRONMENT)"
      export SOURCE_COMMIT_ID=$(Build.SourceVersion)
      export STATUS_ENDPOINT_API_KEY="$(status-endpoint-api-key)"
      export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"

      poetry run pytest -v tests/sandbox/test_sandbox.py --junitxml=tests/sandbox-test-report.xml --reruns 3 --reruns-delay 1 --proxy-name "$(FULLY_QUALIFIED_SERVICE_NAME)" --apigee-app-id "$(APIGEE_APP_ID)"
    displayName: Run sandbox tests
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)"

  - task: PublishTestResults@2
    displayName: 'Publish sandbox test results'
    inputs:
      testResultsFiles: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests/sandbox-test-report.xml
      failTaskOnFailedTests: true
