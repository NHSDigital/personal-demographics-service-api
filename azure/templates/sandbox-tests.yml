steps:
  - template: "expose-pds-variables-and-commands.yml"

  - task: Npm@1
    inputs:
      command: 'custom'
      customCommand: 'install newman -g'

  - bash: |

      url="https://$(APIGEE_ENVIRONMENT).api.service.nhs.uk/$(SERVICE_BASE_PATH)/_status"
      interval_in_seconds=5
      releaseCommit="$(Build.SourceVersion)"

      printf "\nPolling %s every %s seconds, until commit is: %s\n" "$url" "$interval_in_seconds" "$releaseCommit"

      attempts=0
      max_attempts=60
      success=0
      until [ $attempts -eq $max_attempts ]
      do
      echo "attempt: ${attempts}"
      responseData=$(curl -H "apiKey: $(status-endpoint-api-key)" "$url" -s)
      deployedCommit=$(echo "$responseData" | jq -r ".commitId" || echo "not_found")
      sandboxStatus=$(echo "$responseData" | jq -r ".status" || echo "not_found")
      if [ "$deployedCommit" == "$releaseCommit" ] && [ "$sandboxStatus" == "pass" ]; then
          success=1
          break;
      fi;
      ((attempts=attempts+1))
      echo "Sleeping ${interval_in_seconds} seconds"
      sleep $interval_in_seconds;
      done

      if [ $success == 0 ]
      then
          echo "Sandbox did not deploy after %s attempts, using %s-second intervals" "$max_attempts" "$interval_in_seconds"
          exit 255
      fi
    displayName: Wait for sandbox to deploy

  - bash: |
      newman run patient-demographics-sandbox.postman_collection.json --env-var "base_url=https://$(ENVIRONMENT).api.service.nhs.uk/$(PDS_BASE_PATH)" -r cli,junit --insecure --reporter-junit-export newman-test-report.xml
    workingDirectory: "$(ARTIFACT_PATH)/postman"
    displayName: 'Run Postman collection tests'

  - task: PublishTestResults@2
    displayName: 'Publish Postman collection test results'
    inputs:
      testResultsFiles: $(ARTIFACT_PATH)/postman/newman-test-report.xml
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Postman collection test report as an artifact'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      pathToPublish: $(ARTIFACT_PATH)/postman/newman-test-report.xml
      artifactName: PostmanTestReport

  - bash: |
      export CLIENT_ID="$(CLIENT_ID)"
      mvn clean test -Dtest=TestMockParallel
    displayName: 'Run Karate Mock Tests'
    workingDirectory: "$(ARTIFACT_PATH)/karate-tests"

  - task: PublishTestResults@2
    displayName: 'Publish Karate sandbox test results'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      testResultsFiles: $(ARTIFACT_PATH)/karate-tests/target/karate-reports/*.xml
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Karate Sandbox HTML test report as an artifact'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      pathToPublish: $(ARTIFACT_PATH)/karate-tests/target/karate-reports
      artifactName: KarateSandboxHTMLReports
