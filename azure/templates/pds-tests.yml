steps:
  - template: "expose-pds-variables-and-commands.yml"

  - bash: poetry install
    workingDirectory: $(ARTIFACT_PATH)
    displayName: Setup tests

  - bash: |
      export APIGEE_API_TOKEN="$(secret.AccessToken)"
      export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
      export OAUTH_BASE_URI="https://$(ENVIRONMENT).api.service.nhs.uk"
      export OAUTH_PROXY="oauth2-mock"
      export INTERNAL_DEV_ASID="$(INTERNAL_DEV_ASID)"

      poetry run pytest -v tests/functional/test_application_restricted.py --api-name=personal-demographics-service --proxy-name "$(FULLY_QUALIFIED_SERVICE_NAME)" --junitxml=tests/functional-test-report.xml --reruns 5 --reruns-delay 1
    displayName: Run application restricted tests
    workingDirectory: "$(ARTIFACT_PATH)"

  - task: PublishTestResults@2
    displayName: 'Publish application restricted test results'
    inputs:
      testResultsFiles: $(ARTIFACT_PATH)/tests/functional-test-report.xml
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish application restricted test results as an artifact'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      pathToPublish: $(ARTIFACT_PATH)/tests/functional-test-report.xml
      artifactName: pytestFunctionalTestReport    

  - bash: |
      export APIGEE_API_TOKEN="$(secret.AccessToken)"
      export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
      export OAUTH_BASE_URI="https://$(ENVIRONMENT).api.service.nhs.uk"
      export OAUTH_PROXY="oauth2-mock"

      poetry run pytest -v tests/functional/test_proxy_behaviour.py --api-name=personal-demographics-service --proxy-name "$(FULLY_QUALIFIED_SERVICE_NAME)" --junitxml=tests/proxy-behaviour-test-report.xml --reruns 5 --reruns-delay 1
    displayName: Run proxy behaviour tests
    workingDirectory: "$(ARTIFACT_PATH)"

  - task: PublishTestResults@2
    displayName: 'Publish proxy behaviour test results'
    inputs:
      testResultsFiles: $(ARTIFACT_PATH)/tests/proxy-behaviour-test-report.xml
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish proxy behaviour test results as an artifact'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      pathToPublish: $(ARTIFACT_PATH)/tests/proxy-behaviour-test-report.xml
      artifactName: proxyBehaviourTestReport       

  - bash: |
      export APIGEE_API_TOKEN="$(secret.AccessToken)"
      export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
      export OAUTH_BASE_URI="https://$(ENVIRONMENT).api.service.nhs.uk"
      export OAUTH_PROXY="oauth2-mock"

      poetry run pytest -v tests/functional/test_sync_wrap.py --api-name=personal-demographics-service --proxy-name "$(FULLY_QUALIFIED_SERVICE_NAME)" --junitxml=tests/sync-wrap-test-report.xml --reruns 5 --reruns-delay 1
    displayName: Run sync wrap tests
    workingDirectory: "$(ARTIFACT_PATH)"

  - task: PublishTestResults@2
    displayName: "Publish sync wrap test results"
    inputs:
      testResultsFiles: $(ARTIFACT_PATH)/tests/sync-wrap-test-report.xml
      failTaskOnFailedTests: true
  - task: PublishBuildArtifacts@1
    displayName: 'Publish sync wrap test results as an artifact'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      pathToPublish: $(ARTIFACT_PATH)/tests/sync-wrap-test-report.xml
      artifactName: syncwrapTestReport      

  - bash: |
      export APIGEE_API_TOKEN="$(secret.AccessToken)"
      export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
      export OAUTH_BASE_URI="https://$(ENVIRONMENT).api.service.nhs.uk"
      export OAUTH_PROXY="oauth2-mock"
      export TEST_PATIENT_ID="$(TEST_PATIENT_ID)"
      export INTERNAL_DEV_ASID="$(INTERNAL_DEV_ASID)"

      poetry run pytest -v tests/functional/test_patient_create.py --api-name=personal-demographics-service --proxy-name "$(FULLY_QUALIFIED_SERVICE_NAME)" --junitxml=tests/patient-create-test-report.xml --reruns 20 --reruns-delay 1
    displayName: Run post patient tests
    workingDirectory: "$(ARTIFACT_PATH)"

  - task: PublishTestResults@2
    displayName: "Publish post patient test results"
    inputs:
      testResultsFiles: $(ARTIFACT_PATH)/tests/patient-create-test-report.xml
      failTaskOnFailedTests: true
   
  - task: PublishBuildArtifacts@1
    displayName: 'Publish post patient test results as an artifact'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      pathToPublish: $(ARTIFACT_PATH)/tests/patient-create-test-report.xml
      artifactName: postPatientTestReport     

  - bash: |
      export APIGEE_API_TOKEN="$(secret.AccessToken)"
      export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
      export OAUTH_BASE_URI="https://$(ENVIRONMENT).api.service.nhs.uk"
      export OAUTH_PROXY="oauth2-mock"
      export TEST_PATIENT_ID="$(TEST_PATIENT_ID)"
      export INTERNAL_DEV_ASID="$(INTERNAL_DEV_ASID)"

      poetry run pytest -v tests/functional/test_patient_access.py --api-name=personal-demographics-service --proxy-name "$(FULLY_QUALIFIED_SERVICE_NAME)" --junitxml=tests/patient-access-test-report.xml --reruns 20 --reruns-delay 1
    displayName: Run patient access tests
    workingDirectory: "$(ARTIFACT_PATH)"

  - task: PublishTestResults@2
    displayName: "Publish patient access test results"
    inputs:
      testResultsFiles: $(ARTIFACT_PATH)/tests/patient-access-test-report.xml
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish patient access test results as an artifact'
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    inputs:
      pathToPublish: $(ARTIFACT_PATH)/tests/patient-access-test-report.xml
      artifactName: patientAccessTestReport     
