<ProxyEndpoint name="default">
  <PreFlow>
    <Request>
      <Step>
          <Name>AssignMessage.Errors.Default</Name>
      </Step>
      <Step>
          <Name>AssignMessage.Copy.RequestHeaders</Name>
      </Step>
      <!--
        APMSPII-930 need to explicity check for, and remove, the prefer header
        if it is passed in by the client as the sync-wrap component will also
        performs checks on the value of the prefer header.
      -->
      <Step>
          <Name>AssignMessage.RemovePreferHeader</Name>
          <Condition>request.header.prefer IsNot null</Condition>
      </Step>
    </Request>
  </PreFlow>
  <PostFlow>
    <Response>
      <Step>
        <Name>AssignMessage.Revert.RequestHeaders</Name>
      </Step>
    </Response>
  </PostFlow>
  <Flows>
    <Flow name="OptionsPreFlight">
      <Request />
      <Response>
        <Step>
          <Name>AssignMessage.AddCors</Name>
        </Step>
      </Response>
      <Condition>request.verb == "OPTIONS" AND request.header.origin != null AND request.header.Access-Control-Request-Method != null</Condition>
    </Flow>
    <Flow name="AddPayloadToPing">
      <Description />
      <Request />
      <Response>
        <Step>
          <Name>AssignMessage.AddPayloadToPing</Name>
        </Step>
      </Response>
      <Condition>(proxy.pathsuffix MatchesPath "/_ping") and ((request.verb = "GET") or (request.verb = "HEAD"))</Condition>
    </Flow>
    <Flow name="StatusEndpoint">
      <Description/>
      <Request>
        <Step>
          <Name>KeyValueMapOperations.GetSecureVariables</Name>
        </Step>
        <Step>
          <Name>KeyValueMapOperations.GetSharedSecureVariables</Name>
        </Step>
        <Step>
          <Condition>private.apigee.status-endpoint-api-key NotEquals request.header.apikey</Condition>
          <Name>RaiseFault.401Unauthorized</Name>
        </Step>
        <Step>
          <Name>ServiceCallout.CallSpineHealthcheck</Name>
        </Step>
      </Request>
      <Response>
        <Step>
          <Name>javascript.SetStatusResponse</Name>
        </Step>
      </Response>
      <Condition>(proxy.pathsuffix MatchesPath "/_status") and ((request.verb = "GET") or (request.verb = "HEAD"))</Condition>
    </Flow>
  </Flows>
  <PostClientFlow name="PostClientFlow">
    <Response>
      <Step>
        <Name>FlowCallout.LogToSplunk</Name>
      </Step>
    </Response>
  </PostClientFlow>
  <HTTPProxyConnection>
    <BasePath>{{ SERVICE_BASE_PATH }}</BasePath>
    <VirtualHost>secure</VirtualHost>
  </HTTPProxyConnection>
  <RouteRule name="NoRoute">
    <Condition>request.verb == "OPTIONS" AND request.header.origin != null AND request.header.Access-Control-Request-Method != null</Condition>
  </RouteRule>
  <RouteRule name="NoRoutePing">
    <Condition>(proxy.pathsuffix MatchesPath "/_ping") and ((request.verb = "GET") or (request.verb = "HEAD"))</Condition>
  </RouteRule>
  <RouteRule name="NoRouteStatus">
    <Condition>(proxy.pathsuffix MatchesPath "/_status") and ((request.verb = "GET") or (request.verb = "HEAD"))</Condition>
  </RouteRule>
  <RouteRule name="sync-wrap">
    <Condition>
      (request.verb = "PATCH" AND (proxy.pathsuffix MatchesPath "/Patient/{id}") AND request.header.x-sync-wrapped NotEquals "true") OR
      (request.verb = "POST" AND (proxy.pathsuffix MatchesPath "/Patient") AND request.header.x-sync-wrapped NotEquals "true")
    </Condition>
  <TargetEndpoint>sync-wrap</TargetEndpoint>
</RouteRule>
  <RouteRule name="ig3">
    <TargetEndpoint>ig3</TargetEndpoint>
  </RouteRule>
  <DefaultFaultRule>
    <Step>
      <Name>AssignMessage.Errors.CatchAllMessage</Name>
    </Step>
  </DefaultFaultRule>
</ProxyEndpoint>
