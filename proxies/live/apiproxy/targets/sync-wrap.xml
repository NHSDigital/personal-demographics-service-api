<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<TargetEndpoint name="sync-wrap">
  <PreFlow>
    <Request>
      <Step>
        <Name>OauthV2.VerifyAccessToken</Name>
      </Step>
      <Step>
        <Name>FlowCallout.ComplexAttribute</Name>
      </Step>
      <!-- APMSPII-1139 rate litmiting to be handle by shared flow, must be after authorization policy -->
      <Step>
        <Name>FlowCallout.ApplyRateLimiting</Name>
      </Step>
      <Step>
        <Name>AssignMessage.AddSyncWaitHeader</Name>
        <Condition>(request.header.X-Sync-Wait LesserThan 0.25) OR (request.header.X-Sync-Wait GreaterThan 29) OR (request.header.X-Sync-Wait Is null)</Condition>
      </Step>
    </Request>
  </PreFlow>
  <LocalTargetConnection>
    <APIProxy>sync-wrap-{{ APIGEE_ENVIRONMENT }}</APIProxy>
    <ProxyEndpoint>default</ProxyEndpoint>
    <Path>/sync-wrap/{{ SERVICE_BASE_PATH }}</Path>
  </LocalTargetConnection>
  <FaultRules>
    <FaultRule name="pass_through">
      <!-- 4XX errors have come from Spine and can be sent to the user unmodified.
      Other errors are either caught and reformatted on a case-by-case basis or
      we will simply present an 'unknown error'. This is to prevent information leakage. -->
      <Condition>(response.status.code GreaterThanOrEquals 400) And (response.status.code LesserThan 500)</Condition>
      <Step>
        <Condition>(response.status.code Equals "429")</Condition>
         <Name>AssignMessage.Errors.ServiceUnavailable</Name>
      </Step>
      <Step>
        <Condition>(response.status.code Equals "401")</Condition>
         <Name>AssignMessage.Errors.ServiceUnavailable</Name>
      </Step>
      <Step>
        <Condition>(response.status.code Equals "503")</Condition>
         <Name>AssignMessage.Errors.CatchAllMessage</Name>
      </Step>
      <!-- APMSPII-938 explicitly convert 422 error from spine to 500 unkown error as
        as 422 errors will have no meaning for the end user as the implementation details
        of sync-wrap are hidden. -->
      <Step>
        <Condition>(response.status.code Equals "422")</Condition>
        <Name>RaiseFault.500UnknownError</Name>
      </Step>
    </FaultRule>
    <FaultRule name="request_timeout">
      <Condition>(response.status.code Equals "504")</Condition>
      <Step>
        <Name>AssignMessage.Errors.ServiceUnavailable</Name>
      </Step>
      <Step>
        <Name>AssignMessage.Errors.CatchAllMessage</Name>
      </Step>
    </FaultRule>
    <FaultRule name="access_token_expired">
      <Step>
        <Name>ExtractVariables.OAuthErrorFaultString</Name>
      </Step>
      <Step>
        <Name>AssignMessage.Errors.OAuthPolicyResponse</Name>
      </Step>
      <Condition>oauthV2.OauthV2.VerifyAccessToken.failed</Condition>
    </FaultRule>
    <!-- APMSPII-1206 using ApplyRateLimiting Shared Flow -->
    <FaultRule name="app_quota_exceeded">
      <Condition>(ratelimit.QuotaPerApp.failed Equals true)</Condition>
      <Step>
        <Name>AssignMessage.Errors.AppQuotaExceeded</Name>
      </Step>
      <Step>
        <Name>AssignMessage.Mirror.CorrelationID</Name>
        <Condition>(original-request-details.header.X-Correlation-ID ~~ ".+")</Condition>
      </Step>
      <Step>
        <Name>AssignMessage.Mirror.RequestID</Name>
        <Condition>(original-request-details.header.X-Request-ID ~~ ".+")</Condition>
      </Step>
      <Step>
        <Name>AssignMessage.Errors.CatchAllMessage</Name>
      </Step>
    </FaultRule>
    <FaultRule name="app_spikearrest_exceeded">
      <Condition>(ratelimit.SpikeArrestPerApp.failed Equals true)</Condition>
      <Step>
        <Name>AssignMessage.Errors.AppSpikeArrestExceeded</Name>
      </Step>
      <Step>
        <Name>AssignMessage.Mirror.CorrelationID</Name>
        <Condition>(original-request-details.header.X-Correlation-ID ~~ ".+")</Condition>
      </Step>
      <Step>
        <Name>AssignMessage.Mirror.RequestID</Name>
        <Condition>(original-request-details.header.X-Request-ID ~~ ".+")</Condition>
      </Step>
      <Step>
        <Name>AssignMessage.Errors.CatchAllMessage</Name>
      </Step>
    </FaultRule>
    <FaultRule name="proxy_ratelimit_exceeded">
      <Condition>(ratelimit.QuotaPerProxy.failed Equals true OR ratelimit.SpikeArrestPerProxy.failed Equals true)</Condition>
      <Step>
        <Name>AssignMessage.Errors.ProxyRatelimitExceeded</Name>
      </Step>
      <Step>
        <Name>AssignMessage.Mirror.CorrelationID</Name>
        <Condition>(original-request-details.header.X-Correlation-ID ~~ ".+")</Condition>
      </Step>
      <Step>
        <Name>AssignMessage.Mirror.RequestID</Name>
        <Condition>(original-request-details.header.X-Request-ID ~~ ".+")</Condition>
      </Step>
      <Step>
        <Name>AssignMessage.Errors.CatchAllMessage</Name>
      </Step>
    </FaultRule>
  </FaultRules>
  <DefaultFaultRule>
    <Step>
      <Name>AssignMessage.Errors.CatchAllMessage</Name>
    </Step>
  </DefaultFaultRule>
</TargetEndpoint>
