description: |
  ## Overview
  Use this endpoint to update patient details in PDS.

  This is a `PATCH` operation - you can update specific parts of the patient record, such as name or gender, without having to update the entire record.

  When you make a PATCH request with your application, the endpoint will respond with a successful (200) response code, along with the updated patient resource, or, an unsuccessful (4xx/5xx) response. 

  99.99% of all updates complete in under 10 seconds. If an update takes longer than 10 seconds, the endpoint responds with an HTTP status of 503 (Gateway Timeout). 
  
  You can alter the timeout period using the `X-Sync-Wait` header. If you re-submit the update, use the same `X-Request-ID` header.
  
  The behaviour of this endpoint depends on which access mode you are using:
  
  | Access mode                    | Behaviour restrictions              |
  | ------------------------------ | ----------------------------------- |
  | Application-restricted access  | Updates not allowed                 |
  | Healthcare worker access       | Updates allowed                     |
  | Patient access                 | Updates allowed (limited)           |

  ## Patient resource versioning
  To update a patient's resource you must have retrieved it first, to ensure you are working against an up-to-date patient resource.

  When you retrieve a patient resource, you get a version number for the resource (in the `ETag` response header in the form `W/"2"` and in the `versionId` field in the response, in the form `"2"`).

  You must then pass the patient's version number in the update request (in the `If-Match` response header).

  It is recommended you use the value from the `Etag` header as this is in the correct form the `If-Match` header is expected, for example `W/"2"` and can be mirrored back in the request.

  The update only succeeds, if the patient resource has not been updated in our database between your first retrieval and the update request.

  If the update succeeds, you will receive the updated patient resource, this will contain the new resource version number.

  If you make a subsequent update you must use the new version number.

  ## JSON Patch
  To update a patient record, a [JSON Patch](https://tools.ietf.org/html/rfc6902) should be sent. A JSON Patch consists of one or more patch objects within a list.

  It is recommended that all desired updates are sent together in a single request as a list of patches.
  This is the most efficient approach and reduces the danger of race conditions occurring when updating the patient record multiple times in a short period of time.

  When processing the list of patch objects, each patch must be valid and pass all the business rules against the data. If one patch object fails, none of the patch objects are applied.

  A patch object consists of:
  * an operation, `op` - this is required.
  * a path to the data that you want to change, `path` - this is required.
  * the value that is assigned, `value` - this is required for `add`, `replace` and `test`; but should not be included for a `remove`.

  The following operations are supported:
  * `add` - to add a new value.
  * `replace` - to replace an existing value.
  * `remove` - to remove an existing value.
  * `test` - to test the state of a value is as expected before continuing with the update.

  Paths point to a single value, list or object, for example:
  * `/gender` - pointing to the gender value.
  * `/name` - point to the name list.
  * `/name/0` - pointing to the 1st object in the name list.
  * `/address/0/line/1` - pointing to the 2nd line string in the 1st address object.

  The value can be set to any valid value for that path, so could be a null, a string, an object or a list.

  ### Addition

  `add` should be used to add new items to a patient.

  Adding a simple data item such as the date of death can be done using a patch such as:

  ```json
  {
      "patches": [
        { "op": "add", "path": "/deceasedDateTime", "value": "2020-01-01" }
    ]
  }
  ```

  Adding to a list such as a `name` should be done by including the whole object in the value field. Note, the list index is `-` this is because when adding to a list, the index is not known:

  ```json
  {
      "patches": [
        {
              "op": "add",
              "path": "/name/-",
              "value": {
                  "use": "usual",
                  "period": { "start": "2024-12-31" },
                  "prefix": ["Dr"],
                  "given": [
                    "Joe",
                    "Horation",
                    "Maximus"
                  ],
                  "family": "Bloggs",
                  "suffix": ["PhD"]
              }
          }
    ]
  }
  ```

  When adding a base level list item such as a new name or address, ensure the index is always `-`, otherwise the request is rejected. For example, `/name/-`.
  The reason for this is because the backend system makes the decision on the ordering of the listed objects to ensure they are always returned in the same order.

  If you are adding to a sub-element that is a list, such as an extra given name, it is valid to provide an exact index. So the following is valid:

  ```json
  {
    "patches": [
      {
        "op": "add", "path": "/name/0/id", "value": "8F8B957D"
      },
      {
        "op": "add", "path": "/name/0/given/0", "value": "Rose"
      }
    ]
  }
  ```

  It is possible to `add` a sub-element to an existing object in a patch request. If the object already exists and you have the object `id`, you must supply it or the update is rejected.
  The following patch is allowed:

  ```json
  {
    "patches": [
      {
        "op": "add", "path": "/name/0/id", "value": "8F8B957D"
      },
      {
        "op": "add", "path": "/name/0/given/0", "value": "Rose"
      }
    ]
  }
  ```

  but the following is not allowed:
  
  ```json
  {
    "patches": [
      {
        "op": "add", "path": "/name/0/given/-", "value": "Rose"
      }
    ]
  }
  ```

  ### Replacing

  `replace` should be used to alter existing items on the patient.

  Replacing a simple data item such as the gender can be done using a patch such as:

  ```json
  {
      "patches": [
        { "op": "replace", "path": "/gender", "value": "male" }
    ]
  }
  ```

  Replacing a list item can be done in two ways which may be dependent on any external development libraries that can be used to create the patch.

  The first approach is to replace the whole list item:

  ```json
  {
      "patches": [
        {
              "op": "replace",
              "path": "/name/0",
              "value": {
                  "id": "123",
                  "use": "usual",
                  "period": { "start": "2024-12-31" },
                  "prefix": ["Dr"],
                  "given": [
                    "Joe",
                    "Horation",
                    "Maximus"
                  ],
                  "family": "Bloggs",
                  "suffix": ["PhD"]
              }
          }
    ]
  }
  ```

  The second approach is to replace just a part, or parts, of the list object keys if all others remain the same:

  ```json
  {
      "patches": [
        { "op": "replace", "path": "/name/0/id", "value": "123" },
        { "op": "replace", "path": "/name/0/prefix/0", "value": "Mr" },
        { "op": "replace", "path": "/name/0/family", "value": "Smith" }
      ]
  }
  ```

  An added requirement to ensure no accidental data loss or replacement of the wrong list item, you must always include the list `id` or `url`. This is in the object on retrieval so just needs to be mirrored back. You should not include an ID on an addition as this is automatically generated by the system and is a unique object ID, so only our system can guarantee that.

  ### Removal

  `remove` should be used to delete existing items on a patient.

  Removing a simple data item such as the gender can be done using a patch such as:

  ```json
  {
      "patches": [
        { "op": "remove", "path": "/gender" }
    ]
  }
  ```

  Note, that in this scenario, although the patch is perfectly valid, the update is still rejected as a patients gender cannot be removed.

  Removing a list item should only be done on the whole item object, not individual sub-items; instead use the replace operation.

  To remove a list item, a `test` operation must <u>immediately precede</u> the `remove` . This is an added requirement to ensure no accidental data loss occurs or the wrong item is removed. The test operation should be used to assert either:

  * the `id` - the object ID for items that have one - for example `name`, `address` or `telecom`
  * the `url` - the URL for the extension being removed
  * the whole object being removed

  An example of a list item removal using the `id` would be:

  ```json
  {
      "patches": [
        { "op": "test", "path": "/name/0/id", "value": "123" },
        { "op": "remove", "path": "/name/0" }
    ]
  }
  ```

  An example of a extension list item removal using the `url` would be:

  ```json
  {
      "patches": [
        { "op": "test", "path": "/extension/0/url", "value": "https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-DeathNotificationStatus" },
        { "op": "remove", "path": "/extension/0" }
    ]
  }
  ```

  An example of a list item removal using the whole object would be:

  ```json
  {
      "patches": [
        { 
              "op": "test",
              "path": "/name/0",
              "value": {
                  "id": "123",
                  "use": "usual",
                  "period": { "start": "2024-12-31" },
                  "prefix": ["Dr"],
                  "given": [
                    "Joe",
                    "Horation",
                    "Maximus"
                  ],
                  "family": "Bloggs",
                  "suffix": ["PhD"]
              }
          },
        { "op": "remove", "path": "/name/0" }
    ]
  }
  ```
  ### Special considerations for removals ###
  
  See the [Patient access section](#patient-access) for information on updating fields in Patient access mode. 

  Special care should also be taken when performing multiple removals in the same list; as removing a particular index could affect all subsequent index positions. The next two examples perform **<u>exactly</u>** the same operation.

  Using the following initial (simplified) data, with the intention of removing the names in index 1 (Irwin) and 2 (Bruce):

  ```json
  {
      "name": [
          {"id": "2", "family": "Parker"},
          {"id": "3", "family": "Irwin"},
          {"id": "4", "family": "Bruce"},
          {"id": "5", "family": "Sharpe"}
      ]
  }
  ```

  **Example 1**:

  ```json
  {
      "patches": [
        { "op": "test", "path": "/name/1/id", "value": "3" },
        { "op": "remove", "path": "/name/1" },
        { "op": "test", "path": "/name/1/id", "value": "4" },
        { "op": "remove", "path": "/name/1" }
    ]
  }
  ```

  After the 1st removal the data looks like:

  ```json
  {
      "name": [
          {"id": "2", "family": "Parker"},
          {"id": "4", "family": "Bruce"},
          {"id": "5", "family": "Sharpe"}
      ]
  }
  ```

  meaning Irwin has been removed, Bruce has moved from index 2 -> 1 and Sharpe from 3 -> 2.

  So after applying the 2nd removal the data looks like:

  ```json
  {
      "name": [
          {"id": "2", "family": "Parker"},
          {"id": "5", "family": "Sharpe"}
      ]
  }
  ```

  Which is the intended outcome. Using the same index 1 for both removals may look unexpected, but the way JSON Patch works is iterating over each patch operation in turn and making the change to the list index positions. This means a developer needs to account for lists changing from one operation to the next.

  **Example 2**:

  ```json
  {
      "patches": [
        { "op": "test", "path": "/name/2/id", "value": "4" },
        { "op": "remove", "path": "/name/2" },
        { "op": "test", "path": "/name/1/id", "value": "3" },
        { "op": "remove", "path": "/name/1" }
    ]
  }
  ```

  After the 1st removal the data looks like:

  ```json
  {
      "name": [
          {"id": "2", "family": "Parker"},
          {"id": "3", "family": "Irwin"},
          {"id": "5", "family": "Sharpe"}
      ]
  }
  ```

  Applying the 2nd removal the data looks like:

  ```json
  {
      "name": [
          {"id": "2", "family": "Parker"},
          {"id": "5", "family": "Sharpe"}
      ]
  }
  ```

  Which is the intended outcome. Providing the patches with the indexes descending means that the list stays in a stable format the whole way through as the only changes to the index positions are items have been passed over already.

  **Example 3 - a failure**

  ```json
  {
      "patches": [
        { "op": "test", "path": "/name/1/id", "value": "3" },
        { "op": "remove", "path": "/name/1" },
        { "op": "test", "path": "/name/2/id", "value": "4" },
        { "op": "remove", "path": "/name/2" }
    ]
  }
  ```

  After the 1st removal the data looks like:

  ```json
  {
      "name": [
          {"id": "2", "family": "Parker"},
          {"id": "4", "family": "Bruce"},
          {"id": "5", "family": "Sharpe"}
      ]
  }
  ```

  When applying the 2nd test, it fails as the index 2 ID is `5`, but the test was looking for `4`. An error is returned and none of the updates provided would be made to the database.

  This failure example is a good reason for forcing the use of the `test` operation. If there was no test, index 2 would have been blindly removed, meaning the final state of the data would look like:

  ```json
  {
      "name": [
          {"id": "2", "family": "Parker"},
          {"id": "4", "family": "Bruce"}
      ]
  }
  ```

  Which is incorrect, as Irwin and Sharpe were removed instead of Irwin and Bruce.


  ## Patient data fields

  ### Address

  List item found under `address` field.

  In a JSON Patch request the path should be:
  * `/address/0` if the address to be replaced or removed is the first item in the list. If it is the second item in the list the path is `/address/1`, and so on.
  * `/address/-` when adding a new address.

  An address consists of 5 lines of unstructured text, postcode, and address keys. Address keys can include a PAF or a UPRN.
  
  Postcode is optional but strongly encouraged.
  If the address has no postcode, use a [pseudo postcode from the list defined by the Office for National Statistics](https://digital.nhs.uk/services/organisation-data-service/data-downloads/office-for-national-statistics-data) (see the ‘look_ups’ file).
  
  In particular, for a patient at no fixed abode, use the pseudo postcode `ZZ99 3VZ`.
  
  We recommend you use the [OS Places API](https://digital.nhs.uk/developer/api-catalogue/ordnance-survey-places-api) for looking up and verifying addresses prior to a PDS update. 
  
  When adding or replacing address lines, use the following rules:
  * line 1 - premises ID and/or house name, for example `Flat 1` or `The Old Schoolhouse`
  * line 2 - house number, dependent thoroughfare name and descriptor (if present), thoroughfare name and descriptor, for example `23 Mill Lane`
  * line 3 - dependent locality/village, locality (if present), for example `Boxgrove`
  * line 4 - post town, for example `Leeds`
  * line 5 - county (if present), for example `West Yorkshire`
  
  When updating an address, you should populate lines 1 or 2, and line 4. You should not include line 5 in manually created addresses but you may include it in PAF-derived addresses. The address ID must also be included in the update as shown in the below examples.

  There are exceptions:
  * if you submit a postcode and PAF key, in which case the lines are automatically populated, however if there are no matches or too many matches the message is rejected due to missing address lines
  * if you use a pseudo postcode, for example `ZZ99 3VZ` meaning `no fixed abode`

  When creating the FHIR payload message, to be fully FHIR compliant all empty lines should be removed, so for example:
  
  ```json
  {
      "address": {
          "line": [
              "",
              "23 Mill Lane",
              "",
              "Leeds",
              ""
          ]
      }

  }
  ```

  should be sent in as:

  ```json
          {
              "address": {
                  "line": [
                      "23 Mill Lane",
                      "Leeds"
                  ]
              }

          }
  ```

  however if you do not do this the message is not rejected; the response is in that form though.

  To ensure consistent data across all patient addresses, you should match addresses to the PAF and send them in PAF format including the PAF key.
  If you do not include the PAF key it is added to the address if a match is found
  Additionally the provided address lines and post code are enriched and reformatted if necessary.

  The following address types are supported:
  * `home` - the home address is the patient's normal residence. Home address is also known as usual, main, registered, current or permanent address
  * `temp` - a temporary address is an address used for a set period of time, but where the patient's home, permanent address remains unchanged
  * `billing` - an address used for correspondence purposes only

  A patient must have no more than one current `temp` and/or `billing` address.
  However, historically this was constrained only by the integration requirements and was not enforced so theoretically more than one can exist for a patient when retrieving.
  Where multiple instances already exist for the patient it is not expected that local systems should manage those, but should choose the most appropriate one to maintain (for example by examining period dates).

  A `home` address is the patient's main residential address and should normally be used for all clinical and demographic purposes, including clinical and appointment correspondence. However additionally, `temp` and `billing` addresses may be provided by a patient when there is a requirement to record an alternative location for the purposes of unbroken care. When sending correspondence to a patient:
  * a present and valid `billing` address may take precedence over `home` and `temp` addresses. A patient should have only a single current `billing` address. An address is considered 'valid' according to its period start and to dates.
  * if no current `billing` address is provided, a `temp` address may take precedence over the `home` address, again if it is valid according to its period start and to dates.

  Not all local systems support `temp` and `billing` addresses, so these are not uniformly maintained. Therefore, where the patient contact has clinical or business significance, the precedence of these addresses over the `home` address should be determined by a user wherever possible.
  When the end date for a `temp` or `billing` address passes, local systems should use the patient’s `home` address. It is extremely rare that no `home` address is present on a patient record.

  Be aware of the following business rules:
  * you cannot add more than one of each address use types; `home`, `temp` or `billing`
  * `work` address `use` type is a valid response but cannot be added or replaced as it is a legacy value. An address with the `work` type can be removed though
  * any `temp` address must have both a `period start` and a `period end` date. The provision of a period end date has particular importance in order to avoid temporary addresses that are no longer relevant to the patient still being held as current data available to any system retrieving the patient record. A suggested default where no actual period end is known is 30 days later than the period start, up to a maximum of 3 months.
  * any `billing` address must have both a `period start` and a `period end` date. The provision of a period end date has particular importance in order to avoid correspondence addresses that are no longer relevant to the patient still being held as current data available to any system retrieving the patient record. A suggested default where no actual period end is known is 30 days later than the period start, up to a maximum of 12 months.
  * the date period is optional; where present they must be valid dates and the `end` date cannot be before the `start` date
  * the period `start` date is optional, however if provided cannot be a future date. If it is not provided it defaults to the date of update
  * where a `temp` address is provided a description must be sent using the `text` field, the list of allowed values are:
    * `Second Home` - a patient's second home
    * `Student Accommodation` - a patient's place of residence while at university
    * `Respite Care Address` - where the patient resides during respite care
    * `Temporary Residence Address` - where the patient resides for a specific period of time
    * `Convalescence Home` - the address for a patient during a period of recovery
    * `Mobile Home` - the address of a patient's mobile home, parked for a specific period of time, e.g. the address of a caravan park
    * `Holiday Home` - the address for a patient during a holiday
    In rare circumstances, an existing temporary address may be returned with a value outside of this list.

  ### Communication

  Single item found under `extension` with the extension URL `https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NHSCommunication`.

  In a JSON Patch request, where the communication extension does not exist the path should be:
  * `/extension/-` when adding a communication extension.

  Where you are replacing/removing the full communication extension, the path should be:
  * `/extension/0` if the communication extension is the first item in the list. If it is the second item in the list the path is `/extension/1`, and so on.

  Where the communication extension already exists and you wish to replace a specific sub-extension, then the path should be:
  * `/extension/0/extension/1` if the communication extension is the first item in the list and the sub-extension is the second item in the list.
  
  You can find examples of the above requests in our sandbox Postman collection

  There are a number of business rules that should be taken into account:
  * preferred language must not be supplied where it is English even though the [code list](https://simplifier.net/resolve?target=simplifier&scope=uk.nhsdigital.r4&canonical=https://fhir.hl7.org.uk/ValueSet/UKCore-HumanLanguage) contains a value for English (en).
  * any language codes outside the accepted list are rejected; such as local system `qa` codes.

  ### Contact preferences
  Single item found under `extension` with the extension URL `https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-ContactPreference`.

  In a JSON Patch request, where the Contact Preference extension does not exist or you are replacing/removing the full list of Contact preferences, the path should be:
  * `/extension/0` if the contact preference is the first item in the list. If it is the second item in the list the path is `/extension/1`, and so on.
  * `/extension/-` when adding a contact preference.

  Where the Contact Preference extension already exists and you wish to add, replace or remove a specific contact preference(s) sub-extension, then the path should be:
  * `/extension/0/extension/1` if the contact preference extension is the first item in the list and the method is the second item in the sub-extension list.
  
  You can find examples of the above requests in our sandbox Postman collection 

  There are a number of business rules that should be taken into account:
  * a patient can have `0` or `1` contact preference.
  * preferred contact time is a free-text field limited to 40 characters.
  * where a contact time is specified a contact method must also exist.

  ### Date of birth

  Single item found under `birthDate` field.

  In a JSON Patch request the path should be `/birthDate`.

  When adding or updating the birth date, the update should be in the format `yyyy-mm-dd`.

  There are a number of business rules that should be taken into account:
  * cannot be removed.
  * cannot be a date in the future.
  * cannot be after the deceased date, if present.

  ### Date of death

  Single item found under `deceasedDateTime` field.

  In a JSON Patch request the path should be `/deceasedDateTime`.

  When adding or updating the deceased date time, the update should be in the format `yyyy-mm-ddTHH:MM:SS+HH:MM`.

  There are a number of business rules that should be taken into account:
  * cannot be removed.
  * cannot be a date in the future.
  * cannot be before the birth date.
  * cannot be replaced if the death notification status is 2 (formal).
  * when adding date of death, a death notification status must also be added.

  ### Death notification

  Single item found under `extension` with the extension URL `https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-DeathNotificationStatus`.

  In a JSON Patch request the path should be:
  * `/extension/0` if the death notification is the first item in the list. If it is the second item in the list the path is `/extension/1`, and so on.
  * `/extension/-` when adding a death notification.
  
  You can find examples of the above requests in our sandbox Postman collection

  There are a number of business rules that should be taken into account:
  * cannot be removed.
  * cannot be replaced if the death notification status is formal (2).
  * only certain endpoints can set a death notification of formal (2).
  * when adding a death notification, a deceased date time must also be added.

  ### Emergency contact

  List item found under `contact` field.

  In a JSON Patch request the path should be:
  * `/contact/0` if the contact to be replaced or removed is the first item in the list. If it is the second item in the list the path is `/contact/1`, and so on.
  * `/contact/-` when adding a new contact.

  Only emergency contact details should be added to `contact`, regular telecommunication methods such as home phone should be added to the `telecom` field.
  Any other contact relationship types are rejected.

  There are a number of business rules that should be taken into account:
  * in any telecom child object the `use` key should not be present.
  * in any telecom child object the system cannot be `fax`.
  * the date period is optional; where present they must be valid dates and the `end` date cannot be before the `start` date.
  * the period `start` date is optional, however if provided cannot be a future date. If it is not provided it defaults to the date of update.
  * the date period, if present, should be on the parent `contact` object and not any `telecom` child objects.
  * if the system is email, the value must be a valid email format, for example john.smith@example.com; and must be more than 6 characters and less than 90 characters
  * the relationship can only be `C` meaning `Emergency Contact`

  ### Gender

  Single item found under `gender` field.

  In a JSON Patch request the path should be `/gender`.

  When setting a gender, the local system should encourage the user to select `male` or `female` rather than `unknown`.
  The fourth value of gender, `other`, meaning indeterminate; i.e. unable to be classified as either male or female; should never pro-actively be set by local systems - although this value can be retrieved due to legacy data or data quality issues.

  There are a number of business rules that should be taken into account:
    * cannot be removed.
    * can only be `male`, `female` or `unknown`.
    * cannot set gender to `other`.

  ### General practice

  List item found under `generalPractitioner` field. Although only a single general practice is allowed.

  In a JSON Patch request the path should be:
  * `/generalPractitioner/0` for replacing or removing the general practice.
  * `/generalPractitioner/-` when adding a new general practice.

  There are a number of business rules that should be taken into account:
  * only valid GP Practice codes may be used, see [Organisation Data Service FHIR API](https://developer.nhs.uk/apis/ods/) for more details on valid codes.
  * the period `start` date is optional, however if provided cannot be a future date. If it is not provided it defaults to the date of update.
  * do not provide a period `end` date.
  * the general practice should only be updated by primary care systems, [NHAIS](https://digital.nhs.uk/services/nhais) or by the National Back Office.
  * removal of a general practice can only be done by [NHAIS](https://digital.nhs.uk/services/nhais) or by the National Back Office.
  * only a single general practice is supported; emergency, temporary and additional practices must be maintained in the local system only.

  ### Managing Organisation (internal-use only)

  Single item found under `managingOrganization` field.

  In a JSON Patch request the path should be `/managingOrganization`.

  The following business rules should be observed:
  * only valid GP Practice codes may be used, see [Organisation Data Service FHIR API](https://developer.nhs.uk/apis/ods/) for more details on valid codes.
  * the period `start` date is optional, however if provided cannot be a future date. If it is not provided it defaults to the date of update.
  * only a single general practice is supported; emergency, temporary and additional practices must be maintained in the local system only.

  ### Multiple birth order

  Single item found under `multipleBirthInteger` field.

  In a JSON Patch request the path should be `/multipleBirthInteger`.

  When adding or updating the birth order, the update should be an integer in the range `1` - `9` inclusive. These values have differing meanings:
  * 1 - 7 indicates the order of birth, with 1 indicating the first or only birth in the sequence, 2 indicating the second birth in the sequence, 3 indicating the third, and so on up to 7.
  * 8 - `Not applicable`
  * 9 - `Not known`

  ### Name

  List item found under `name` field.

  In a JSON Patch request the path should be:
  * `/name/0` if the name to be replaced or removed is the first item in the list. If it is the second item in the list the path is `/name/1`, and so on.
  * `/name/-` when adding a new name.

  There are a number of business rules that should be taken into account:
  * cannot add more than one `usual` name.
  * cannot remove the `usual` name.
  * cannot add more than one `nickname`.
  * can have multiple instances of all other name use types.
  * cannot replace the use type on an existing name. For example, once a name is a nickname, it cannot be changed directly to an alias. You must instead remove the nickname and add the alias.
  * the first character of each `suffix` item must be `A-Z`.
  * the date period is optional; where present they must be valid dates and the `end` date cannot be before the `start` date.
  * the period `start` date is optional, however if provided cannot be a future date. If it is not provided it defaults to the date of update.
  * supplied name data can only contain characters from the following ranges:

  | Character Code/Range | Examples      |
  |----------------------|---------------|
  | 65-90                | A-Z           |
  | 97-122               | a-z           |
  | 45                   | Apostrophe    |
  | 39                   | Hyphen        |
  | 32                   | Space         |
  | 192-214              | À, Æ, Ö, ...  |
  | 216-246              | Ø, ß, ö, ...  |
  | 248-383              | ø, ü, ÿ, ...  |
  | 46                   | Full-stop     |
  | 48-57	               | Numbers       |

  * the `period` is optional, but if included the `end` date cannot be before the `start` date. They can however be in the past, present or future.
  * the full available range of generally recognised titles are permitted, however, if any of the following are used then the value input must conform to the following format:
      * Mr
      * Mrs
      * Ms
      * Dr
      * Rev
      * Sir
      * Lady
      * Lord
  * any trailing full stops at the end of a prefix are automatically removed; for example `Mrs.` changes to `Mrs`.

  ### Pharmacy

  Single item found under `extension` with one of the extension urls:
  * `https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NominatedPharmacy`
  * `https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier`
  * `https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-PreferredDispenserOrganization`

  In a JSON Patch request the path should be:
  * `/extension/0` if the pharmacy is the first item in the list. If it is the second item in the list the path is `/extension/1`, and so on
  * `/extension/-` when adding a pharmacy

  There are a number of business rules that should be taken into account:
  * multiple pharmacies are allowed, however only one of each type
  * there are no effective date periods, only a single current instance of each type is supported
  * only valid National Pharmacy codes may be used for the pharmacy identifier, see [Organisation Data Service FHIR API](https://developer.nhs.uk/apis/ods/) for more details on valid codes

  ### Place of birth

  Single item found under `extension` with the extension URL `http://hl7.org/fhir/StructureDefinition/patient-birthPlace`.

  In a JSON Patch request the path should be:
  * `/extension/0` if the place of birth is the first item in the list. If it is the second item in the list the path is `/extension/1`, and so on
  * `/extension/-` when adding a place of birth

  There are a number of business rules that should be taken into account:
  * the three fields, `city`, `district` and `country` are all optional, however at least one of them must be provided
  * country is a coded value and must be in the set of valid values

  ### Telecom

  List item found under `telecom` field.

  In a JSON Patch request the path should be:
  * `/telecom/0` if the telecom to be replaced or removed is the first item in the list. If it is the second item in the list the path is `/telecom/1`, and so on
  * `/telecom/-` when adding a new telecom

  In PDS, a telecom is made up of two values: a 'system' and a 'use'. The telecom system values are:
  * phone
  * fax
  * email
  * other

  The telecom use values are:
  * home
  * work
  * temp
  * mobile
  
  A patient should only have one instance of each telecom value on their record at a time. For example, to add a new work email value to the record, the existing work email value should be replaced with the new value.
  
  Emergency contact details should not be added to the `telecom` field, instead they should be added to the `contact` field.

  There are a number of business rules that should be taken into account:
  * the date period is optional; where present they must be valid dates and the `end` date cannot be before the `start` date
  * the period `start` date is optional, however if provided cannot be a future date. If it is not provided it defaults to the date of update.
  * if using the `replace` operation, the use and system must be the same as the telecom you're modifying. Otherwise use a delete and add instead.
  * if the telecom system is email, the value must be a valid email format, for example john.smith@example.com; and must be more than 6 characters and less than 90 characters

  ## Access Mode

  ### Healthcare worker access

  A user with Healthcare worker access will be able to update the following fields:
  * Address
  * Communication
  * Contact preferences
  * Date of birth
  * Date of death
  * Death notification
  * Emergency contact
  * Gender
  * General practice
  * Managing Organisation (internal use only)
  * Multiple birth order
  * Name
  * Pharmacy
  * Place of birth
  * Telecom

  ### Patient access

  A user with Patient access will be able to update the following fields:
  * Address
  * Communication (communication language and interpreter required only)
  * Emergency contact
  * Pharmacy
  * Place of birth
  * Telecom (mobile and email only)

  In Patient access mode, for all operations except `remove`, you must include the whole object in the patch to update the following fields: 
  * Communication (communication language and interpreter required only)
  * Pharmacy
  * Place of birth
  * Telecom (mobile and email only) 

  ## Sandbox test scenarios

  You can test the following scenarios in our sandbox environment.

  Things to note when using the sandbox for PATCH:
  * Your changes are not persisted.
  * JSON Patch operations themselves are validated, but the resulting resource is not validated for correctness; meaning any business rules are not applied.
  * You can use the patient with minimal data, `9000000033` to test adding all data types (as most of them are missing on this patient), that would normally be present (e.g. gender).

  | Scenario                            | Request                                                                   | Response                                         |
  | ----------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------ |
  | Successful update                   | `id`=`9000000009`<br><br>Body: One of the provided examples or your own combination of patches<br><br>Headers: `If-Match`=`W/"2"`, `Content-Type`=`application/json-patch+json` | HTTP Status 200 with updated patient resource. |
  | Patient does not exist               | `id`=`9111231130` (or any other valid NHS number)                         | HTTP Status 404 with problem description         |
  | Invalid NHS number                  | `id`=`9000000000` (or any invalid NHS number)                             | HTTP Status 400 with problem description         |
  | Missing resource version identifier | `If-Match` header missing or set to format other than `W/"<version>"`     | HTTP Status 412 with problem description         |
  | Incorrect resource version          | `If-Match`=`W/"1"`                                                        | HTTP Status 412 with problem description         |
  | Wrong content type                  | `Content-Type` header missing or other than `application/json-patch+json` | HTTP Status 400 with problem description         |
  | No patches sent                     | Send body with no `patches` attribute                                     | HTTP Status 400 with problem description         |
  | Invalid patch operations            | Send body with invalid JSON patches in `patches` attribute                | HTTP Status 400 with problem description         |
  | Missing X-Request-ID                | `id`=`9000000009` (or any other valid NHS number)                         | HTTP Status 400 with problem description         |

  You can try out the sandbox by selecting the 'Try' button on this page.

  Alternatively, you can try out the sandbox using our Postman collection:
  
  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/32547823-005ebee4-7510-44c3-bb0e-58f26b2ba747)

  
summary: Update patient details
operationId: update-patient-partial
parameters:
  - $ref: '../../personal-demographics.yaml#/components/parameters/IfMatch'
  - $ref: '../../personal-demographics.yaml#/components/parameters/ContentType'
requestBody:
  required: true
  content:
    application/json-patch+json:
      schema:
        type: object
        required:
          - patches
        properties:
          patches:
            $ref: ../schemas/JsonPatch.yaml
      examples:
        add-deceased-date-time:
          summary: Add a new single item (deceasedDateTime) to the patient
          value:
            $ref: ../examples/requests/PatientPatch/add-deceased-date-time.json
        add-name:
          summary: Add a new list item (name) to the patient
          value:
            $ref: ../examples/requests/PatientPatch/add-name.json
        add-extension:
          summary: Add a an extension (nominated pharmacy) to the Patient
          value:
            $ref: ../examples/requests/PatientPatch/add-extension.json
        update-gender:
          summary: Update the simple item (gender)
          value:
            $ref: ../examples/requests/PatientPatch/update-gender.json
        update-address:
          summary: Update specific fields on a list item (address)
          value:
            $ref: ../examples/requests/PatientPatch/update-address.json
        update-address-alternative:
          summary: Update whole object on a list item (address)
          value:
            $ref: ../examples/requests/PatientPatch/update-address-alternative.json
        update-extension:
          summary: Update an extension (death notification)
          value:
            $ref: ../examples/requests/PatientPatch/update-extension.json
        delete-gender:
          summary: Remove a single item (gender) no longer in use
          value:
            $ref: ../examples/requests/PatientPatch/delete-gender.json
        delete-name:
          summary: Remove a list item (name) no longer in use, using test pointing to the name items id
          value:
            $ref: ../examples/requests/PatientPatch/delete-name.json
        delete-name-alternative:
          summary: Remove a list item (name) no longer in use, using test pointing to the name object
          value:
            $ref: ../examples/requests/PatientPatch/delete-name-alternative.json
        delete-extension:
          summary: Remove an extension (dispensing doctor pharmacy) no longer in use
          value:
            $ref: ../examples/requests/PatientPatch/delete-extension.json
responses:
  '200':
    description: Patient updated.
    headers:
      ETag:
        $ref: '../../personal-demographics.yaml#/components/headers/ETag'
      X-Correlation-Id:
        $ref: '../../personal-demographics.yaml#/components/headers/X-Correlation-Id'
      X-Request-Id:
        $ref: '../../personal-demographics.yaml#/components/headers/X-Request-Id'            
    content:
      application/fhir+json:
        schema:
          $ref: ../schemas/Patient.yaml
        example:
          $ref: ../examples/Patient.json   
  '4XX':
    description: |
      An error occurred as follows:
      
      | HTTP status | Error code                 | Description |
      | ----------- | -------------------------- | --------------------------------------------- |
      | 400         | UNSUPPORTED_SERVICE        | Missing NHS number. |
      | 400         | MISSING_VALUE              | Missing header parameter. For details, see the `diagnostics` field. |
      | 400         | INVALID_VALUE              | Invalid header parameter or invalid value in body of patch request. For details, see the `diagnostics` field. |
      | 400         | INVALID_UPDATE             | Malformed patch request or client error after the patch was accepted and patient was not updated. For example, a start date was after the corresponding end date. |
      | 400         | INVALID_RESOURCE_ID        | Invalid NHS number. |
      | 400         | VALIDATION_ERROR           | This is the "default" error thrown when no others are applicable. |
      | 400         | UNSUPPORTED_CHARACTERS_IN_FIELD | Invalid value in body of patch request. For details, see the `diagnostics` field. |
      | 400         | ADDITIONAL_PROPERTIES      | The user sent additional properties within the dictionary. For example sending a patient patch and attempting to add 'pets', which is not an allowed field within the patient resource. |
      | 400         | UNSUPPORTED_VALUE          | There was an unsupported value in the request. The value may be valid in the schema - however it could be a legacy value that we do not allow to be set anymore. For example - setting the death notification status to 'removed'. The invalid value and field will be presented in the display. |
      | 400         | TOO_FEW_VALUES_SUBMITTED   | The field in question has a minimum number of items and the user sent too few. |
      | 400         | TOO_MANY_VALUES_SUBMITTED  | The field in question has a maximum number of items and the user sent too many. |
      | 401         | ACCESS_DENIED              | Access token missing, invalid or expired, or calling application not configured for this operation. |
      | 403         | FORBIDDEN_UPDATE           | The user is not permitted to update certain resources or elements, for example most users are not allowed to update the date of death once it has been set. A detailed description will be added to the display. For example - updating a sensitive patient or adding a formal death notification is only permitted from certain systems. |
      | 403         | ACCESS_DENIED              | Patient cannot perform this action. |
      | 404         | RESOURCE_NOT_FOUND         | Patient does not exist for given NHS number. |
      | 404         | INVALIDATED_RESOURCE       | Patient record for given NHS number has been invalidated and not superseded by another NHS number. |
      | 408         | UNABLE_TO_CALL_SERVICE     | The downstream domain processing has not completed within the configured timeout period. |
      | 409         | RESOURCE_VERSION_MISMATCH  | The resource version in the `If-Match` header of the update request did not match the current version of the resource. See [Patient resource versioning](https://digital.nhs.uk/developer/api-catalogue/personal-demographics-service-fhir#patient-resource-versioning). |
      | 412         | PRECONDITION_FAILED        | Problem with request, for example missing `If-Match` header. For details, see the `diagnostics` field. |
      | 429         | TOO_MANY_REQUESTS          | You have exceeded your application's [rate limit](https://digital.nhs.uk/developer/guides-and-documentation/reference-guide#rate-limits). |
    content:
      application/fhir+json:
        schema:
          $ref: '../../personal-demographics.yaml#/components/schemas/OperationOutcome'
        example:
          resourceType: OperationOutcome
          issue:
            - severity: error
              code: structure
              details:
                coding:
                  - system: 'https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode'
                    version: '1'
                    code: INVALID_UPDATE
                    display: Update is invalid
              diagnostics: "Invalid update with error - Update unsupported for resource - 'pets'"      
  '503':
    description: |
      The request timed out during processing. This does not imply the request has failed or been rejected. Error code: `SERVICE_UNAVAILABLE`.

      Re-send the request after the time specified in the `Retry-After` header using the same `X-Request-ID` value.
    headers:
      RetryAfter:
        $ref: '../../personal-demographics.yaml#/components/headers/RetryAfter'
    content:
      application/fhir+json:
        schema:
          $ref: '../../personal-demographics.yaml#/components/schemas/OperationOutcome'
        example:
          resourceType: OperationOutcome
          issue:
            - severity: error
              code: timeout
              details:
                coding:
                  - system: 'https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode'
                    version: '1'
                    code: SERVICE_UNAVAILABLE
                    display: Service unavailable
              diagnostics: "The downstream domain processing has not completed within the configured timeout period. Using the same 'X-Request-ID' header, retry your request after the time specified by the 'Retry-After' response header."